using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
class MostValuedCustomer
{
    static void Main()
    {
        string input = Console.ReadLine();
        Dictionary<string, double> productPrices = new Dictionary<string, double>();
        Dictionary<string, List<string>> customersProducts = new Dictionary<string, List<string>>();
        double totalSum = 0;
        while (input != "Shop is open")
        {
            string[] inputTokens = input.Split(' ').ToArray();
            string productName = inputTokens[0];
            double productPrice = double.Parse(inputTokens[1]);
            productPrices.Add(productName, productPrice);
            input = Console.ReadLine();
        }
        input = Console.ReadLine();
        while (input != "Print")
        {
            string[] inputTokens = input.Split(new string[] { ": " }, StringSplitOptions.RemoveEmptyEntries).ToArray();
            string nameOfCustomer = inputTokens[0];
            if (inputTokens[0] != "Discount")
            {
                string[] broughtProduct = inputTokens[1].Split(new string[] { ", " }, StringSplitOptions.RemoveEmptyEntries);
                if (!customersProducts.ContainsKey(nameOfCustomer))
                {
                    customersProducts.Add(nameOfCustomer, new List<string>());
                }
                for (int i = 0; i < broughtProduct.Length; i++)
                {
                    if (productPrices.ContainsKey(broughtProduct[i]))
                    {
                        customersProducts[nameOfCustomer].Add(broughtProduct[i]);
                    }
                }
            }
            else if (inputTokens[0]=="Discount")
            {
                foreach (var item in productPrices.OrderByDescending(x => x.Value).Take(3))
                {
                    double discounted = item.Value- (item.Value* 10D) / 100D;
                    productPrices[item.Key]=discounted;
                }
            }
            input = Console.ReadLine();
        }
        Dictionary<string, double> biggestSpender = new Dictionary<string, double>();
        foreach (var prod in customersProducts)
        {
            foreach (var product in productPrices)
            {
                string productName = product.Key;
                double productPrice = product.Value;
                for (int i = 0; i < prod.Value.Count; i++)
                {
                    if (productName==prod.Value[i])
                    {
                        totalSum += productPrice;
                    }
                    if (!biggestSpender.ContainsKey(prod.Key))
                    {
                        biggestSpender.Add(prod.Key, new double());
                    }
                    biggestSpender[prod.Key] = totalSum;
                }
            }
            totalSum = 0;
        }
        foreach (var item in biggestSpender.OrderByDescending(x => x.Value))
        {
            Console.WriteLine($"Biggest spender: {item.Key}");
            Console.WriteLine("^Products bought:");
            foreach (var customer in customersProducts)
            {
                int counter = 0;
                if (customer.Key == item.Key)
                {
                    HashSet<string> productPrint = new HashSet<string>();
                    while (counter < customer.Value.Count)
                    {
                        productPrint.Add(customer.Value[counter]);
                        counter++;
                    }
                    foreach (var prod in productPrint)
                    {
                        Console.WriteLine($"^^^{prod}: {productPrices[prod]:F2}");
                    }
                }
            }
            Console.WriteLine($"Total: {item.Value:F2}");
        }
    }
}
